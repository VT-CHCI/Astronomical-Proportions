var displayedExp = 0;

var log_types = { //check these values against the order in db/fixtures/log_types.yml
	"begin":	1, 
	"select":	2, 
	"action":	3
};

var predictionTolerance = 5;
var predictionSecondaryTolerance = 6*predictionTolerance;
var precision = 3; //Precision of prediction mode
var resizePadding = 2;
var predictionOriginalObjectWidth = 350 - resizePadding;
var predictionTooLargeFlag = false;

$(document).ready(function(){
	var objects = {};
	var DEFAULT_LOCATION = "diameter";

  //Initiliaze to choose objects
   
	$("#animateObjects").hide();
  $("#analogyObjects").hide();
  $("#predictionObjects").hide();
  

	var urlDimension = location.hash.replace("#","");
	if (urlDimension.length == 0) {
		urlDimension = DEFAULT_LOCATION;
		$("#"+DEFAULT_LOCATION).addClass("active");
		sendLog([[log_types["begin"], "started with no dimension, defaulted to " + DEFAULT_LOCATION]]);
		clog("started with no dimension, defaulted to " + DEFAULT_LOCATION);
	}
	else {
		$("#"+urlDimension).addClass("active");
		sendLog([[log_types["begin"], "started with dimension: " + urlDimension]]);
		clog("started with dimension: " + urlDimension);
	}

	$("#home").click(function(){
		if($("#chooseObjects").is(":hidden")) {
			$("#chooseObjects").trigger("activate");
		}
	});

	$("#predictionButton").click(function(){
		var leftSize = parseFloat(($("#predictionleftObject img").width()/predictionOriginalObjectWidth).toFixed(precision));
		var rightSize = parseFloat(($("#predictionrightObject img").width()/predictionOriginalObjectWidth).toFixed(precision));

    var leftValue = parseFloat($("#predictionleftObject img").attr("attr" + urlDimension));
    var rightValue = parseFloat($("#predictionrightObject img").attr("attr" + urlDimension));

    if(leftValue < rightValue) {
      var screenDifference = (leftSize/rightSize)*100;
      var realDifference = (leftValue/rightValue)*100;
    }
    else {
      var screenDifference = (rightSize/leftSize)*100;
      var realDifference = (rightValue/leftValue)*100;
    }
    var difference = ((screenDifference - realDifference)/Math.abs(realDifference))*100;
    var adjustedDifference = Math.abs(difference);

    console.log("urlDimension: " + urlDimension);
    console.log("leftSize: " + leftSize);
    console.log("rightSize: " + rightSize)
    console.log("leftValue: " + leftValue);
    console.log("rightValue: " + rightValue)
    console.log("realDifference: " + realDifference);
    console.log("screenDifference: " + screenDifference);
    console.log("difference: " + difference);

    

		if(adjustedDifference <= predictionTolerance) {
			$("#predictionCorrect").show();
		}
		else if (adjustedDifference <= predictionSecondaryTolerance) {
			if(difference > 0) {
				$("#predictionCloseSmall").show();
			}
			else {
				$("#predictionCloseLarge").show();
			}
		} 
		else {
			//Left Actual Value greater than right actual value
			//One has to be at maximum, the other at minimum
			//The ratio must be inexpressible on the screen (too big/small)
			//Size must be correct for each object
			if(leftSize >= 1.000 && rightSize <= 0.024 ) {
				if(leftValue/rightValue >= 40) {
					$("#predictionCorrect").show();
				}
				else {
				$("#predictionIncorrect").show();
			}
			}
			else if(rightSize >= 1.000 && leftSize <= 0.024 ) {
				if(rightValue/leftValue >= 40) {
					$("#predictionCorrect").show();
				}
				else {
				$("#predictionIncorrect").show();
			}
			}
			else {
				$("#predictionIncorrect").show();
			}

		}
	});

	$("#chooseObjects").bind("objectsLoaded", function() {

		$("#list1").clone().appendTo("#rightList");
    $("#rightList > .listContainer").attr("id", "list2");

    $("#list1").clone().appendTo("#analogySecondObjectsLeft");
    $("#analogySecondObjectsLeft > .listContainer").attr("id", "list3");

    $("#list2").clone().appendTo("#analogySecondObjectsRight");
    $("#analogySecondObjectsRight > .listContainer").attr("id", "list4");

    $(".listContainer").ioslist();

		$(".listContainer").each(function(){
			var id = $(this).attr("id");
			$("#"+id+" dd").click(function(){
				var oldSelection = $("#"+id+" dd.selectedObject");
				
				oldSelection.toggleClass("selectedObject");
				if (!oldSelection.attr("id")) {
					sendLog([[log_types["select"], "from: " + id + " selected: " + $(this).find("img").attr("attrname")]]);
					clog("from " + id + " selected: " + $(this).attr("id"));
					$(this).toggleClass("selectedObject");
				}
				else if (oldSelection.attr("id") != $(this).attr("id")) {
					sendLog([[
						log_types["select"], 
						"from: " + id + "changed selection from: " + oldSelection.attr("id") + 
						" to: " + $(this).attr("id")]]);
					clog("from: " + id + "changed selection from: " + oldSelection.attr("id") + 
						" to: " + $(this).attr("id"));
					$(this).toggleClass("selectedObject");
				}


				if ($(".selectedObject").length == 2) {

					//If compare mode activated, execute the enclosed
					if($("#selector-list li.active").attr("id") == "li-compare") {
					//Clear List
					$("#leftObject").empty();
					$("#rightObject").empty();

					clog("from list 1, user selected: " + $("#list1 dd.selectedObject img").attr("attrname"));
					clog("from list 2, user selected: " + $("#list2 dd.selectedObject img").attr("attrname"));
					sendLog([[log_types["action"], "animating with left object: " + $("#list1 dd.selectedObject img").attr("attrname") + " and right object: " + $("#list2 dd.selectedObject img").attr("attrname")]])
					$("#leftObject").append($("#list1 dd.selectedObject img").clone());
					$("#rightObject").append($("#list2 dd.selectedObject img").clone());
					$("#leftObject img").removeClass("iosListImage");
					$("#rightObject img").removeClass("iosListImage");
					  scale(urlDimension, $("#leftObject img"), $("#rightObject img"), $("#main .span10"));
					  $("#animateObjects").trigger("activate", {"selectedObjects" : $(".selectedObject")});
				  }

				  //If analogy mode activated, execute the enclosed
				  if($("#selector-list li.active").attr("id") == "li-analogy") {
				  	//Setup
				  	 $("#analogyleftObject").empty();
					   $("#analogyrightObject").empty();
					   $("#analogyAnimateleftObject").empty();
					   $("#analogyAnimaterightObject").empty();
					   $("#analogySecondObjectsLeft").show();
					   $("#analogySecondObjectsRight").show();
				  	 $("#analogyleftObject").append($("#list1 dd.selectedObject img").clone());
					   $("#analogyrightObject").append($("#list2 dd.selectedObject img").clone());
					   $("#analogyleftObject img").removeClass("iosListImage");
				     $("#analogyrightObject img").removeClass("iosListImage");
				     $("#analogyleftObjectName1").text($("#analogyleftObject img").attr("attrarticle") + " " +
					   			$("#analogyleftObject img").attr("attrname"));
				     $("#analogyrightObjectName1").text($("#analogyrightObject img").attr("attrarticle") + " " +
					   			$("#analogyrightObject img").attr("attrname"));
				     $("#analogyleftObjectValue1").html(" (" + $("#analogyleftObject img").attr("attr"+urlDimension)+" "+
				     	getDimensionUnit(urlDimension) + ")");
				     $("#analogyrightObjectValue1").html(" (" + $("#analogyrightObject img").attr("attr"+urlDimension)+" "+
				     	getDimensionUnit(urlDimension) + ")");
				     $("#analogyleftObjectName2").text("________");
				     $("#analogyrightObjectName2").text("________");
				     var analogyLeftSize = parseFloat($("#analogyleftObject img").attr("attr" + urlDimension));
				     var analogyRightSize = parseFloat($("#analogyrightObject img").attr("attr" + urlDimension));
				     if(analogyLeftSize >= analogyRightSize) {
				     	$("#analogyRatio1").text(parseFloat(1).toFixed(precision) + ":" + parseFloat(analogyRightSize/analogyLeftSize).toPrecision(3));
				     }
				     else {
				     	$("#analogyRatio1").text(parseFloat(analogyLeftSize/analogyRightSize).toPrecision(precision) + ":" + parseFloat(1).toFixed(precision));
				     }

				     $(".analogyDimension").text(urlDimension);
				     $("#list3").clone().appendTo("#analogyrightList");
				     $("#analogyrightList > .listContainer").attr("id", "list4");
				     
				     //Activate
				  	 $("#analogyObjects").trigger("activate", {"selectedObjects" : $(".selectedObject")});
				  }

				  //If prediction mode activated, execute the enclosed
					if($("#selector-list li.active").attr("id") == "li-prediction") {
						 //Setup
						 $("#predictionleftObject").empty();
					   $("#predictionrightObject").empty();
				  	 $("#predictionleftObject").append($("#list1 dd.selectedObject img").clone());
					   $("#predictionrightObject").append($("#list2 dd.selectedObject img").clone());
					   $("#predictionleftObject img").removeClass("iosListImage");
					   $("#predictionrightObject img").removeClass("iosListImage");
					   $("#leftPredictionObjectName").text($("#predictionleftObject img").attr("attrarticle") + " " +
					   			$("#predictionleftObject img").attr("attrname"));
					   $("#rightPredictionObjectName").text($("#predictionrightObject img").attr("attrarticle") + " " +
					   		 	$("#predictionrightObject img").attr("attrname"));
					   $("#predictionleftObject img").css("height","348px");
						 $("#predictionleftObject img").css("width","348px");
						 $("#predictionrightObject img").css("height","348px");
					   $("#predictionrightObject img").css("width","348px");
					   $("#predictionleftObjectSize").text(($("#predictionleftObject img").width()/predictionOriginalObjectWidth).toFixed(precision));
					   $("#predictionrightObjectSize").text(($("#predictionrightObject img").width()/predictionOriginalObjectWidth).toFixed(precision));
					   $(".label").hide();

					   //Do
				  	 $("#predictionObjects").trigger("activate", {"selectedObjects" : $(".selectedObject")});
				  	 $("#predictionObjects img").resizable({
            		aspectRatio: 1 / 1,
	            		maxHeight: 350,
	            		maxWidth: 350,
           		  minHeight: 10,
           		  minWidth: 10,
           		  resize: function() {
           		  	$("#predictionleftObjectSize").text(($("#predictionleftObject img").width()/predictionOriginalObjectWidth).toFixed(precision));
					        $("#predictionrightObjectSize").text(($("#predictionrightObject img").width()/predictionOriginalObjectWidth).toFixed(precision));
					        $(".label").hide();
					        $("#predictionRatio").show();
					        var leftSize = $("#predictionleftObject img").width()/predictionOriginalObjectWidth;
									var rightSize = $("#predictionrightObject img").width()/predictionOriginalObjectWidth;
									if((leftSize >= 1.000 && rightSize <= 0.024) || (rightSize >= 1.000 && leftSize <= 0.024 )) {
										$("#predictionRatio").hide();
					        	$("#predictionTooLarge").show();
					        }//End if statement
           		  },//End resize function
           		  create: function() {
           		  	$("#predictionRatio").show();
           		  	$("#predictionleftObject .ui-wrapper").css("height","350px");
           		  	$("#predictionleftObject .ui-wrapper").css("width","350px");
           		  	$("#predictionleftObject img").css("height","348px");
								  $("#predictionleftObject img").css("width","348px");
								  $("#predictionrightObject .ui-wrapper").css("height","350px");
           		  	$("#predictionrightObject .ui-wrapper").css("width","350px");
					        $("#predictionrightObject img").css("height","348px");
					        $("#predictionrightObject img").css("width","348px");
           		  }
      			  });
										
				  	 // $('.ui-resizable-sw').addClass('ui-icon ui-icon-gripsmall-diagonal-sw');
				  }
				}

				//Analogy
				if(id == "list3") {
					$("#analogyleftObjectName2").text($("#analogySecondObjectsLeft .selectedObject img").attr("attrarticle") + " " +
					   			$("#analogySecondObjectsLeft .selectedObject img").attr("attrname"));
				     
				}
				if(id == "list4") {
					$("#analogyrightObjectName2").text($("#analogySecondObjectsRight .selectedObject img").attr("attrarticle") + " " +
					   			$("#analogySecondObjectsRight .selectedObject img").attr("attrname"));
				     
				}

				if(($("#list3 .selectedObject").length + $("#list4 .selectedObject").length) == 2) {
				console.log("Executing analogy");
				$("#analogySecondObjectsLeft").hide();
				$("#analogySecondObjectsRight").hide();
				console.log("left: " + $("#analogySecondObjectsLeft .selectedObject img"));
				$("#analogyAnimateleftObject").append($("#analogySecondObjectsLeft .selectedObject img").clone());
				$("#analogyAnimaterightObject").append($("#analogySecondObjectsRight .selectedObject img").clone());
				$("#analogyAnimateleftObject img").removeClass("iosListImage");
				$("#analogyAnimaterightObject img").removeClass("iosListImage");
			  scale(urlDimension, $("#analogyAnimateleftObject img"), $("#analogyAnimaterightObject img"), $("#analogySecondObjects"));
			  analogyLeftSize = parseFloat($("#analogyAnimateleftObject img").attr("attr" + urlDimension));
				analogyRightSize = parseFloat($("#analogyAnimaterightObject img").attr("attr" + urlDimension));
				if(analogyLeftSize >= analogyRightSize) {
				  $("#analogyRatio2").text(parseFloat(1).toFixed(precision) + ":" + parseFloat(analogyRightSize/analogyLeftSize).toPrecision(precision));
				}
				else {
				  $("#analogyRatio2").text(parseFloat(analogyLeftSize/analogyRightSize).toPrecision(precision) + ":" + parseFloat(1).toFixed(precision));
				}
			}
			});
		}); //End list container each
		
		$("#chooseObjects").bind("dimensionChosen", function() {
			$(".listContainer dd img").each(function(){
				// This filters the items in the list to only show the ones with the dimension chosen.
				if ($(this).attr("attr"+urlDimension)) {
					$(this).parent().show();
					$(this).parent().parent().show();
				} else {
					$(this).parent().hide();
				}
			});

			// // If all the items for a given person are hidden, hide the name
			// $(".listContainer dl").each(function(){
			// 	if ($(this).find("img:visible").length == 0) {
			// 		$(this).hide();
			// 	}
			// });

		});

		$("#chooseObjects").trigger("dimensionChosen");

	}); // End bind to objects loaded

	$("#chooseObjects").trigger("objectsLoaded");



	$("#dimension-list li").click(function() {
		urlDimension = $(this).attr("id").substring(3);
		clog("changed dimension to: " + $(this).attr("id").substring(3));		
		sendLog([[log_types["select"], "changed dimension to: " + $(this).attr("id").substring(3)]]);
		$("#dimension-list li.active").toggleClass("active");
		$(this).toggleClass("active");
		if ($("#chooseObjects").is(":hidden")) {
			$("#chooseObjects").trigger("activate");
		}
		$("#chooseObjects").trigger("dimensionChosen");
	});


	$("#selector-list li").click(function() {
		$("#selector-list li.active").toggleClass("active");
		$(this).toggleClass("active");
    if($("#chooseObjects").is(":hidden")) {
			$("#chooseObjects").trigger("activate");
		}
	});

	$("#animateObjects").bind("activate", function(event, data) {
		$("#chooseObjects").hide();
		$("#animateObjects").show();
		$("#reverseDescription").trigger("resetDescriptions");
	});


  $("#analogyObjects").bind("activate", function(event, data) {
		$("#chooseObjects").hide();
		$("#analogyObjects").show();
	});



  $("#predictionObjects").bind("activate", function(event, data) {
		$("#chooseObjects").hide();
		$("#predictionObjects").show();
	});

	$("#chooseObjects").bind("activate", function(event, data) {
		$("#chooseObjects").toggle();
			$("#animateObjects").hide();
			$("#analogyObjects").hide();
			$("#predictionObjects").hide();
		$(".selectedObject").removeClass("selectedObject");
		$(".scaleExplanation").toggleClass("hidden");
	});

	$("#reverseDescription").bind("resetDescriptions", function() {
		displayedExp = 0;
		$(".scaleExplanation").addClass("hidden");
		$("#expl0").removeClass("hidden");
	});

}); //Closes document ready

function scale(dimension, a, b, animationContainer) {
	console.log("Scaling...");
	function verboseDescription(left, right, factor) {
		//   users selects L <--> S                                       users selects S <--> L
		// * The diameter of L is 7 times larger than the diameter of S. 	The diameter of S is 7 times smaller than the diameter of L.
		// * The diameter of S is 1/7 of the diameter of L.              	The diameter of S is 1/7 of the diameter of L.
		// * The diameter of S is 7 times smaller than the diameter of L. The diameter of L is 7 times larger than the diameter of S.
		function respLarger(a, b, factor, dimension) {
			return "The " + dimension.replace(/_/g, " ") + " of " + a.attr("attrarticle") + " " + a.attr("attrname") + " is " + factor + " times larger than the " + dimension.replace(/_/g, " ") + " of " + b.attr("attrarticle") + " " + b.attr("attrname") + ".";
		}

		function respFraction(a, b, factor, dimension) {
			return "The " + dimension.replace(/_/g, " ") + " of " + b.attr("attrarticle") + " " + b.attr("attrname") + " is about 1/" + factor + " (" + (1/factor).toFixed(2) + ") of the " + dimension.replace(/_/g, " ") + " of " + a.attr("attrarticle") + " " + a.attr("attrname") + ".";
		}

		function respSmaller(a, b, factor, dimension) {
			return "The " + dimension.replace(/_/g, " ") + " of " + b.attr("attrarticle") + " " + b.attr("attrname") + " is about " + factor + " times smaller than the " + dimension.replace(/_/g, " ") + " of " + a.attr("attrarticle") + " " + a.attr("attrname") + ".";
		}

		function respEqual(a, b, dimension) {
			return "The " + dimension.replace(/_/g, " ") + " of " + a.attr("attrarticle") + " " + a.attr("attrname") + " is about equal to the " + dimension.replace(/_/g, " ") + " of " + b.attr("attrarticle") + " " + b.attr("attrname") + ".";
		}		

		function respPercent(a, b, factor, dimension) {
			return "The " + dimension.replace(/_/g, " ") + " of " + b.attr("attrarticle") + " " + b.attr("attrname") + " is " + factor + "% of the " + dimension.replace(/_/g, " ") + " of " + a.attr("attrarticle") + " " + a.attr("attrname") + ".";
		}


		var result = "";
		if (Math.round(factor) == 1 ) {
			result += '<span id="expl0" class="scaleExplanation">';
			result += respEqual(left, right, dimension);
			result += '</span>';
			$("#reverseDescription").hide();
		}
		else {
			$("#reverseDescription").show();
			$("#reverseDescription").unbind("click");
			$("#reverseDescription").click(function() {
				$(".scaleExplanation").addClass("hidden");
				$("#expl"+displayedExp++%4).toggleClass("hidden");
				clog("changed to expl "+displayedExp%4);
				sendLog([[log_types["action"], "explanation changed to: "+$(".scaleExplanation:visible").text()]]);
			});

			if (factor < 1) {
				result += '<span id="expl0" class="scaleExplanation">';
				result += respSmaller(right, left, (1/factor).toFixed(precision), dimension);
				result += '</span><span id="expl1" class="scaleExplanation hidden">';
				result += respFraction(right, left, (1/factor).toFixed(precision), dimension);
				result += '</span><span id="expl2" class="scaleExplanation hidden">';
				result += respLarger(right, left, (1/factor).toFixed(precision), dimension);
				result += '</span><span id="expl3" class="scaleExplanation hidden">';
				result += respPercent(right, left, ((1/factor)*100).toFixed(2), dimension);
				result += '</span>';
			}
			else {
				result += '<span id="expl0" class="scaleExplanation">';
				result += respLarger(left, right, (factor).toFixed(precision), dimension);
				result += '</span><span id="expl1" class="scaleExplanation hidden">';
				result += respFraction(left, right, (factor).toFixed(precision), dimension);
				result += '</span><span id="expl2" class="scaleExplanation hidden">';
				result += respSmaller(left, right, (factor).toFixed(precision), dimension);
				result += '</span><span id="expl3" class="scaleExplanation hidden">';
				result += respPercent(right, left, ((factor)*100).toFixed(2), dimension);
				result += '</span>';
			}
		}

		$("#verboseDescription").children().remove();
		$("#verboseDescription").append(result);
	}
	var factor = parseFloat(a.attr("attr"+dimension))/parseFloat(b.attr("attr"+dimension));

	//Scaling Section
	if (parseFloat(b.attr("attr"+dimension)) > parseFloat(a.attr("attr"+dimension))) {
		window.setTimeout(
			function () {
				var aWidth = Math.max(b.width()*factor, 5);
				//This is terrible, we are assuming stuff here.
				var marginLeft = animationContainer.width()- a.parent().width() - aWidth -1;
				console.log("awidth" + aWidth);
				console.log("marginLeft: " + marginLeft);
				a.animate({
					width: aWidth, 
					marginLeft: marginLeft+"px"
				}, 1000);
			}
		, 1000);
	}
	else {
		//a > b
		window.setTimeout(
			function () {
				var bWidth = Math.max(a.width()/factor, 5);
				var marginRight = animationContainer.width() - b.parent().width() - bWidth -1;
				console.log("bwidth" + bWidth);
				console.log("marginRight: " + marginRight);
				b.animate({
					width: bWidth, 
					marginRight: marginRight+"px"
				}, 1000);
			}
		, 1000);
		
	}
	verboseDescription(a, b, factor);
}

var logging = true;

function clog(msg) {
	if (logging) {
		console.log(msg);
	}
}

function getDimensionUnit(dimension) {
if(dimension == "surface_area")
	return "m<sup>2</sup>";
else if(dimension == "area")
	return "m<sup>2</sup>";
else if(dimension == "volume")
	return "m<sup>3</sup>";
else
	return "m";
}

function currentUser() {
	var user;
	if ($("#current_person") && $("#current_person").text().length > 0) {
		user = $("#current_person").text();
	}
	return user;
}

function sendLog (logInfoPairs) {
	var logs = [];
	for (i=0; i<logInfoPairs.length; i++) {
		var log = {
			"logType_id":	logInfoPairs[i][0], 
			"details":		logInfoPairs[i][1]
		};
		if ($("#current_person_id").length == 1) {
			var p_id = $("#current_person_id");
			if (p_id && p_id.text()) {
				log["person_id"] = p_id.text();
			}
		}
		else if ($("#last_person_id").length == 1) {
			log["unknown_user_details"] = $("#last_person_id").text();
		}
		logs.push(log);
	}
  console.log("about to post");
	$.ajax("http://test.astronomicalproportions.org/interaction_logs/service",
		{
			data: {"logs":logs, "application":"Astronomical Proportions"},
			type: "POST",
			dataType: "jsonp",
			success: function(data, textStatus, jqXHR){
				console.log("in my callback");
				console.log(data);
				console.log(textStatus);
				console.log(jqXHR);
			}
		} 		
	);
}